##### DONE ##### -------------------------------------------------------------------------------------------------------
...


##### NOW ##### --------------------------------------------------------------------------------------------------------
add storage for entities
    store all entities in separate tables
        name will be based on class name
        existing annotations will be used to identify relationship type
            I could use @Part @Link @Shared @Cache @Value annotations
                @Cache fields should be skipped
                @Value fields will be stored directly in a column
                @Part can only be an entity I think ... investigate
                fields without annotations will be skipped
                add helper reflection util class
        tables will be create on demand
        store somewhere version of the data structure
        order columns by their name

    problem ...
        on load, we have only id, for that we need to find an entity
        we dont know the following upon load:
            1) table name for the id
                can be searched in sqlite tables and for each look up id
            2) class for the table name (for instance creation)
                muse be stored somewhere, cannot easily lookup in java
                needs a central storage
            3) module from which to load external entities
                if id not found in current module
                then it will look in current module dependencies map
                    4) but for that we need to have dependencies already loaded
                        a) we would either need to build a dependency tree (circular dependency limitation)
                        b) or we would first load empty entities for all modules and after that resolve references

    another problem ...
        how to save entities?
        when we modify entity in UI, we might have a save button, right?
        is that save button going to commit? I think it should!
        but what should happen if user dont save? entity in memory should not be modified!
        so data in ui should be saved only in a form object, not directly in entity!

    there goes a ui question - should the UI be build on top of
        a) entities
        b) directly on database tables

add logic for id translation among modules

add export to DML for version control
    export location as folder
    export components into a file
    resources will be just copied to a folder
    free form strings need to be searched for ' and these need to be double quoted ''


##### SOON ##### -------------------------------------------------------------------------------------------------------
add test for expression instruction creation service
add test for command instruction creation service
add test for instruction optimization service
add test for rollback


##### LATER ##### -------------------------------------------------------------------------------------------------------
add ui (choose the most suitable toolkit)
    decide if I want to have it auto-generated or manually-generated


##### MAYBE LATER ##### ------------------------------------------------------------------------------------------------
add scheduler(s) for cores or threads ?

add optimization for local (anonymous expression) variable count
    each expression does not have to create new variable, they could reuse existing variables
    in our case it does not matter, it would matter though if exported to another language
    tip: idea for expression variable count
        I think we need at most the number of variables as it is max number of expression parameters
            the only problem with this would be the current implementation of assignment